# @package _global_
config:
  VERBOSE: False
  LOG_FREQUENCY: 10
  TEST_ONLY: False
  TEST_MODEL: False
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: forkserver
  HOOKS:
    PERF_STATS:
      MONITOR_PERF_STATS: True
      PERF_STAT_FREQUENCY: 40
      ROLLING_BTIME_FREQ: 5
  DATA:
    NUM_DATALOADER_WORKERS: 10
    TRAIN:
      DATA_SOURCES: [disk_folder]
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 256
      LABEL_TYPE: sample_index    # just an implementation detail. Label isn't used
      TRANSFORMS:
        - name: ImgPilToMultiCrop
          total_num_crops: 10 #this also adjusted, these transforms make it also comparable to swav
          size_crops: [224, 96]
          num_crops: [2, 8]  #adjusted this to fb recommendations, same as swav
          crop_scales: [[0.14, 1], [0.05, 0.14]] #adjusted to FB, same as swav
        - name: RandomHorizontalFlip
          p: 0.5
        - name: ImgPilColorDistortion
          strength: 0.5
        - name: ImgPilMultiCropRandomApply
          transforms: [{"name": "ImgPilGaussianBlur", "p": 1., "radius_min": 0.1, "radius_max": 2.0}]
          prob: [1., 0.1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
        - name: ImgPilMultiCropRandomApply
          transforms: [{"name": "ImgPilRandomSolarize", "p": 1.}]
          prob: [0., 0.2, 0., 0., 0, 0, 0, 0, 0, 0]
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
      COLLATE_FUNCTION: multicrop_collator
      MMAP_MODE: True
      COPY_TO_LOCAL_DISK: False
      COPY_DESTINATION_DIR: /tmp/dino_resnet50/
      DROP_LAST: True
  TRAINER:
    TRAIN_STEP_NAME: standard_train_step
  METERS:
    name: "dino_4_gpus_resnet50.yaml"
  MODEL:
    TRUNK:
      NAME: resnet
      RESNETS:
          DEPTH: 50
    HEAD:
      PARAMS: [
          [ "swav_head", { "dims": [ 2048, 2048, 128 ], "use_bn": True, "num_clusters": [ 3000 ] } ],
      ]
    TEMP_FROZEN_PARAMS_ITER_MAP: [
      [ 'module.heads.0.prototypes0.weight', 313 ],

    # TODO (Min): FSDP need to return the original param name from named_parameters().

    # Configuration for flatten_parameters = True
      [ '_fsdp_wrapped_module.heads.0._fsdp_wrapped_module._fpw_module.prototypes0._fsdp_wrapped_module.weight', 313 ],

    # Configuration for flatten_parameters = False
      [ '_fsdp_wrapped_module.heads.0._fsdp_wrapped_module.prototypes0._fsdp_wrapped_module.weight', 313 ]
  ]
    SYNC_BN_CONFIG:
      CONVERT_BN_TO_SYNC_BN: True
      SYNC_BN_TYPE: apex
      GROUP_SIZE: 8
    AMP_PARAMS:
      USE_AMP: True
      AMP_ARGS: { "opt_level": "O1" }
      AMP_TYPE: pytorch
  LOSS:
    name: dino_loss
    dino_loss:
      momentum: 0.996
      teacher_temp_warmup_iters: 37530 # 30 epochs
      teacher_temp_min: 0.04
      teacher_temp_max: 0.07
      ema_center: 0.9
      normalize_last_layer: false #apparently boosts performance if false but only safe with small vit, hopefully also resnet50
  OPTIMIZER:
    name: sgd
    use_larc: True
    larc_config:
      clip: False
      trust_coefficient: 0.001
      eps: 0.00000001
    weight_decay: 0.000001
    momentum: 0.9
    nesterov: False
    num_epochs: 400
    regularize_bn: True
    regularize_bias: True
    param_schedulers:
      lr:
        auto_lr_scaling:
          auto_scale: true
          base_value: 0.3
          base_lr_batch_size: 256
        name: composite
        schedulers:
          - name: linear
            start_value: 0.3
            end_value: 4.8
          - name: cosine
            start_value: 4.8
            end_value: 0.0048
        update_interval: step
        interval_scaling: [ rescaled, fixed ]
        lengths: [ 0.025, 0.975 ]           # 400ep
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 1
    NUM_PROC_PER_NODE: 4
    INIT_METHOD: tcp
    RUN_ID: auto
  MACHINE:
    DEVICE: gpu
  CHECKPOINT:
    DIR: "."
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 5
    OVERWRITE_EXISTING: true
  SLURM:
    CONSTRAINT: volta32gb



